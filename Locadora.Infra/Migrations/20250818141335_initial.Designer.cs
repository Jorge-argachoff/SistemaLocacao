// <auto-generated />
using System;
using Locadora.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Locadora.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250818141335_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Locadora.Domain.Entities.Entregador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CNPJ")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("CaminhoImagemCNH")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagemCNH")
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NumeroCNH")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TipoCNH")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.ToTable("Tb_Entregador", (string)null);
                });

            modelBuilder.Entity("Locadora.Domain.Entities.Locacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataPrevisaoTermino")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataTermino")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EntregadorId")
                        .HasColumnType("bigint");

                    b.Property<long>("MotoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntregadorId")
                        .IsUnique();

                    b.HasIndex("MotoId")
                        .IsUnique();

                    b.ToTable("Tb_Locacao", (string)null);
                });

            modelBuilder.Entity("Locadora.Domain.Entities.Moto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Ano")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Modelo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Placa")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.ToTable("Tb_Moto", (string)null);
                });

            modelBuilder.Entity("Locadora.Domain.Entities.Planos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Dias")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<decimal>("ValorDia")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Tb_Plano", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dias = 7,
                            Nome = "Plano 7",
                            ValorDia = 30.00m
                        },
                        new
                        {
                            Id = 2L,
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dias = 15,
                            Nome = "Plano 15",
                            ValorDia = 28.00m
                        },
                        new
                        {
                            Id = 3L,
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dias = 30,
                            Nome = "Plano 30",
                            ValorDia = 22.00m
                        },
                        new
                        {
                            Id = 4L,
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dias = 45,
                            Nome = "Plano 45",
                            ValorDia = 20.00m
                        },
                        new
                        {
                            Id = 5L,
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dias = 50,
                            Nome = "Plano 50",
                            ValorDia = 18.00m
                        });
                });

            modelBuilder.Entity("Locadora.Domain.Entities.Locacao", b =>
                {
                    b.HasOne("Locadora.Domain.Entities.Entregador", "Entregador")
                        .WithOne("Locacao")
                        .HasForeignKey("Locadora.Domain.Entities.Locacao", "EntregadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Locadora.Domain.Entities.Moto", "Moto")
                        .WithOne("Locacao")
                        .HasForeignKey("Locadora.Domain.Entities.Locacao", "MotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entregador");

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("Locadora.Domain.Entities.Entregador", b =>
                {
                    b.Navigation("Locacao");
                });

            modelBuilder.Entity("Locadora.Domain.Entities.Moto", b =>
                {
                    b.Navigation("Locacao");
                });
#pragma warning restore 612, 618
        }
    }
}
